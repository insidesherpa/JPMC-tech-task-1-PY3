From f2775f71d3e8f9a573ddbd097e7dfd7a807c8125 Mon Sep 17 00:00:00 2001
From: Issac-Lopez <lopezissaca@gmail.com>
Date: Thu, 21 Jul 2022 15:17:37 -0600
Subject: [PATCH] Create Patch File

---
 __pycache__/client3.cpython-39.pyc | Bin 0 -> 1136 bytes
 client3.py                         |  57 ++++++++++-------
 client_test.py                     |  58 ++++++++++++-----
 server3.py                         |  98 +++++++++++++++++------------
 4 files changed, 134 insertions(+), 79 deletions(-)
 create mode 100644 __pycache__/client3.cpython-39.pyc

diff --git a/__pycache__/client3.cpython-39.pyc b/__pycache__/client3.cpython-39.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..46352fbfeb7a0941c882ec0a9923f6cb6fee63e2
GIT binary patch
literal 1136
zcmYjQ&2HQ_5GEx`t6lFpj^m#$a$yP>%_4Q|BA39;U*otb3e-qq6h#RKf>xZhWospw
z;ui6CeR3aUeas{D+Cy)Bfb!Z??mhLA4!O1w5;OA+XGje{j*?ENMR45s{qO!?i2kw8
zr=y9^GnD#IRFX)V6EU+?Q0IHXbJiD3dLod%2qlxjZ$va?C>v-aXv*l=Q-44U!gKn9
zynQF;fK1!KjyltM2&OlHPU!`?pcizyV6C{B5wQq2F?Unkf(G0=r~6DSiDj`OR$&zu
zVd)Wp&twypU>R0mb--50Ii=)8<7x{cSd?>Jg1X%$=iX)PJ4yFQuk!)#LUzY@4z;ef
zHa7AyP4dIC)>{uZA8u}(j6j_}&E(@>&$53hAt}oB2oN!pZIt>MstIz^C1+Gy<aLSk
z@q6^lb3VKF{fRg6SBVU6lQTA<)|;>a!)n6u*Zh?#<tPQ7<T)<~Tpt2203=BMOOlVE
z=DOquP=HD_CUKeQgjZ!&Xl{a9m+7%-=(39YnKVJAvJ_^1QXhZtu*M!W!5}Xa-3v@`
zGAcDFyKI`cA)e(oF?R-)z21AG=Ft52G~L?&{?*I9pLX_-s$r=Pk^=G0y9!hWMG6@F
zVS8OedbqCfg!Ql1tJ4SjX^uht;C^*#<_|!}w%*v)dj}7#UB~$mUBKC<s)K8(t><c3
zY{hZBgkVA?#r|naZx30X(Axxg^T(g_m!LUvl9iS<cab>ZNg*$BpDX)zyY4PMPc$x5
zu0Y=fW~z;erfI8n2i`-s4p9*nQAX9g4M%Z2OtK=5$6vg*EK0ss^F;Hz$m7;p{Ut{V
zoORzp)Eh@{TzPA?@xOV#ZTuHI-}btK9o1zaLWQN4L&J171TjBSd7ky}E5HV<wFqav
z2wwlV^X6wmcO6mJg%rsU;@AXu#sL_L2p?G1qH(pqf&0q}3KI@WHB7W&3KD5T_x`mB
zU5&Mh@M5kTl>OC}eH+&Su8|7;2}8Cal%pwnG{k<*;mI;C)pt=v)J>n^j9NJTHf_=N
Q#};E4SwLa5^)d4Q2XSg1q5uE@

literal 0
HcmV?d00001

diff --git a/client3.py b/client3.py
index f1771c3..0a58ca1 100644
--- a/client3.py
+++ b/client3.py
@@ -18,10 +18,10 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
-import urllib.request
-import time
 import json
 import random
+import time
+import urllib.request
 
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
@@ -29,31 +29,40 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
-def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
-
-def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+
+def get_data_point(quote):
+    """ Produce all of the needed values to generate a data point """
+    """ ------------- Update this function ------------- """
+    stock = quote['stock']
+    bid_price = float(quote['top_bid']['price'])
+    ask_price = float(quote['top_ask']['price'])
+    price = (bid_price + ask_price) / 2
+    return stock, bid_price, ask_price, price
+
+
+def get_ratio(price_a, price_b):
+    """ Get ratio of price_a and price_b """
+    """ ------------- Update this function ------------- """
+    """ Also create some unit tests for this function in client_test.py """
+    if (price_b == 0):
+        return  # when price_b is 0 avoid throwing ZeroDivisionError
+    return price_a/price_b
+
 
 # Main
 if __name__ == "__main__":
 
-	# Query the price once every N seconds.
-	for _ in iter(range(N)):
-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+    # Query the price once every N seconds.
+    for _ in range(N):
+        quotes = json.loads(urllib.request.urlopen(
+            QUERY.format(random.random())).read())
 
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+        """ ----------- Update to get the ratio --------------- """
+        prices = {}  # prices stores data points for iterations from get_data_point
+        for quote in quotes:
+            stock, bid_price, ask_price, price = get_data_point(quote)
+            prices[stock] = price
+            print("Quoted %s at (bid:%s, ask:%s, price:%s)" %
+                  (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % (get_ratio(prices['ABC'], prices['DEF'])))
diff --git a/client_test.py b/client_test.py
index af2bf26..14924ce 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,24 +1,54 @@
 import unittest
-from client3 import getDataPoint
+
+from client3 import get_data_point, get_ratio
+
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
+    def test_get_data_point_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Add the assertion below ------------ """
+        for quote in quotes:
+            self.assertEqual(get_data_point(quote), (quote['stock'],
+                                                     quote['top_bid']['price'],
+                                                     quote['top_ask']['price'],
+                                                     (quote['top_bid']['price'] +
+                                                      quote['top_ask']['price'])/2))
+
+    def test_get_data_point_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Add the assertion below ------------ """
+        for quote in quotes:
+            self.assertEqual(get_data_point(quote), (quote['stock'],
+                                                     quote['top_bid']['price'],
+                                                     quote['top_ask']['price'],
+                                                     (quote['top_bid']['price'] +
+                                                      quote['top_ask']['price'])/2))
+
+        """ ------------ Unit tests for ratio calculations ------------ """
 
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
+    def test_get_ratio_calculateRatio(self):
+        prices = {'ABC': 114.25, 'DEF': 112.035}
 
+        self.assertEqual(
+            get_ratio(prices['ABC'], prices['DEF']), prices['ABC']/prices['DEF'])
 
-  """ ------------ Add more unit tests ------------ """
+    def test_get_ratio_calculateRatioPriceAZero(self):
+        prices = {'ABC': 0, 'DEF': 112.035}
+        self.assertEqual(get_ratio(prices['ABC'], prices['DEF']), 0)
 
+    def test_get_ratio_calculateRatioPriceBZero(self):
+        prices = {'ABC': 114.25, 'DEF': 0}
+        self.assertEqual(get_ratio(prices['ABC'], prices['DEF']), None)
 
 
 if __name__ == '__main__':
diff --git a/server3.py b/server3.py
index 2de4e28..4423945 100644
--- a/server3.py
+++ b/server3.py
@@ -18,22 +18,20 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
-#from itertools import izip
-from random    import normalvariate, random
-from datetime  import timedelta, datetime
-
 import csv
-import dateutil.parser
-import os.path
-
-import operator
+#from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
+import http.server
 import json
+import operator
+import os.path
 import re
 import threading
+from datetime import datetime, timedelta
+#from itertools import izip
+from random import normalvariate, random
+from socketserver import ThreadingMixIn
 
-#from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
-import http.server
-from socketserver   import ThreadingMixIn
+import dateutil.parser
 
 ################################################################################
 #
@@ -41,14 +39,14 @@ from socketserver   import ThreadingMixIn
 
 # Sim params
 
-REALTIME    = True
-SIM_LENGTH  = timedelta(days = 365 * 5)
-MARKET_OPEN = datetime.today().replace(hour = 0, minute = 30, second = 0)
+REALTIME = True
+SIM_LENGTH = timedelta(days=365 * 5)
+MARKET_OPEN = datetime.today().replace(hour=0, minute=30, second=0)
 
 # Market parms
 #       min  / max  / std
-SPD  = (2.0,   6.0,   0.1)
-PX   = (60.0,  150.0, 1)
+SPD = (2.0,   6.0,   0.1)
+PX = (60.0,  150.0, 1)
 FREQ = (12,    36,   50)
 
 # Trades
@@ -59,6 +57,7 @@ OVERLAP = 4
 #
 # Test Data
 
+
 def bwalk(min, max, std):
     """ Generates a bounded random walk. """
     rng = max - min
@@ -66,13 +65,15 @@ def bwalk(min, max, std):
         max += normalvariate(0, std)
         yield abs((max % (rng * 2)) - rng) + min
 
-def market(t0 = MARKET_OPEN):
+
+def market(t0=MARKET_OPEN):
     """ Generates a random series of market conditions,
         (time, price, spread).
     """
     for hours, px, spd in zip(bwalk(*FREQ), bwalk(*PX), bwalk(*SPD)):
         yield t0, px, spd
-        t0 += timedelta(hours = abs(hours))
+        t0 += timedelta(hours=abs(hours))
+
 
 def orders(hist):
     """ Generates a random set of limit orders (time, side, price, size) from
@@ -80,9 +81,9 @@ def orders(hist):
     """
     for t, px, spd in hist:
         stock = 'ABC' if random() > 0.5 else 'DEF'
-        side, d  = ('sell', 2) if random() > 0.5 else ('buy', -2)
+        side, d = ('sell', 2) if random() > 0.5 else ('buy', -2)
         order = round(normalvariate(px + (spd / d), spd / OVERLAP), 2)
-        size  = int(abs(normalvariate(0, 100)))
+        size = int(abs(normalvariate(0, 100)))
         yield t, stock, side, order, size
 
 
@@ -90,14 +91,15 @@ def orders(hist):
 #
 # Order Book
 
-def add_book(book, order, size, _age = 10):
+def add_book(book, order, size, _age=10):
     """ Add a new order and size to a book, and age the rest of the book. """
     yield order, size, _age
     for o, s, age in book:
         if age > 0:
             yield o, s, age - 1
 
-def clear_order(order, size, book, op = operator.ge, _notional = 0):
+
+def clear_order(order, size, book, op=operator.ge, _notional=0):
     """ Try to clear a sized order against a book, returning a tuple of
         (notional, new_book) if successful, and None if not.  _notional is a
         recursive accumulator and should not be provided by the caller.
@@ -111,7 +113,8 @@ def clear_order(order, size, book, op = operator.ge, _notional = 0):
         elif len(tail) > 0:
             return clear_order(order, -sdiff, tail, op, _notional)
 
-def clear_book(buy = None, sell = None):
+
+def clear_book(buy=None, sell=None):
     """ Clears all crossed orders from a buy and sell book, returning the new
         books uncrossed.
     """
@@ -120,11 +123,12 @@ def clear_book(buy = None, sell = None):
         new_book = clear_order(order, size, sell)
         if new_book:
             sell = new_book[1]
-            buy  = buy[1:]
+            buy = buy[1:]
         else:
             break
     return buy, sell
 
+
 def order_book(orders, book, stock_name):
     """ Generates a series of order books from a series of orders.  Order books
         are mutable lists, and mutating them during generation will affect the
@@ -133,7 +137,7 @@ def order_book(orders, book, stock_name):
     for t, stock, side, order, size in orders:
         if stock_name == stock:
             new = add_book(book.get(side, []), order, size)
-            book[side] = sorted(new, reverse = side == 'buy', key = lambda x: x[0])
+            book[side] = sorted(new, reverse=side == 'buy', key=lambda x: x[0])
         bids, asks = clear_book(**book)
         yield t, bids, asks
 
@@ -141,6 +145,7 @@ def order_book(orders, book, stock_name):
 #
 # Test Data Persistence
 
+
 def generate_csv():
     """ Generate a CSV of order history. """
     with open('test.csv', 'wb') as f:
@@ -150,6 +155,7 @@ def generate_csv():
                 break
             writer.writerow([t, stock, side, order, size])
 
+
 def read_csv():
     """ Read a CSV or order history into a list. """
     with open('test.csv', 'rt') as f:
@@ -160,16 +166,19 @@ def read_csv():
 #
 # Server
 
+
 class ThreadedHTTPServer(ThreadingMixIn, http.server.HTTPServer):
     """ Boilerplate class for a multithreaded HTTP Server, with working
         shutdown.
     """
     allow_reuse_address = True
+
     def shutdown(self):
         """ Override MRO to shutdown properly. """
         self.socket.close()
         http.server.HTTPServer.shutdown(self)
 
+
 def route(path):
     """ Decorator for a simple bottle-like web framework.  Routes path to the
         decorated method, with the rest of the path as an argument.
@@ -179,6 +188,7 @@ def route(path):
         return f
     return _route
 
+
 def read_params(path):
     """ Read query parameters into a dictionary if they are parseable,
         otherwise returns None.
@@ -188,6 +198,7 @@ def read_params(path):
         query = query[1].split('&')
         return dict(map(lambda x: x.split('='), query))
 
+
 def get(req_handler, routes):
     """ Map a request to the appropriate route of a routes instance. """
     for name, handler in routes.__class__.__dict__.items():
@@ -199,23 +210,25 @@ def get(req_handler, routes):
                 req_handler.end_headers()
                 params = read_params(req_handler.path)
                 data = json.dumps(handler(routes, params)) + '\n'
-                req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
+                req_handler.wfile.write(bytes(data,  encoding='utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+
+def run(routes, host='0.0.0.0', port=8080):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
     class RequestHandler(http.server.BaseHTTPRequestHandler):
         def log_message(self, *args, **kwargs):
             pass
+
         def do_GET(self):
             get(self, routes)
     server = ThreadedHTTPServer((host, port), RequestHandler)
-    thread = threading.Thread(target = server.serve_forever)
+    thread = threading.Thread(target=server.serve_forever)
     thread.daemon = True
     thread.start()
-    print ('HTTP server started on port 8080')
+    print('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
@@ -227,21 +240,23 @@ def run(routes, host = '0.0.0.0', port = 8080):
 #
 # App
 
+
 ops = {
     'buy':  operator.le,
     'sell': operator.ge,
 }
 
+
 class App(object):
     """ The trading game server application. """
 
     def __init__(self):
-        self._book_1    = dict()
-        self._book_2    = dict()
-        self._data_1    = order_book(read_csv(), self._book_1, 'ABC')
-        self._data_2    = order_book(read_csv(), self._book_2, 'DEF')
+        self._book_1 = dict()
+        self._book_2 = dict()
+        self._data_1 = order_book(read_csv(), self._book_1, 'ABC')
+        self._data_2 = order_book(read_csv(), self._book_2, 'DEF')
         self._rt_start = datetime.now()
-        self._sim_start, _, _  = next(self._data_1)
+        self._sim_start, _, _ = next(self._data_1)
         self.read_10_first_lines()
 
     @property
@@ -263,9 +278,9 @@ class App(object):
                 yield t, bids, asks
 
     def read_10_first_lines(self):
-            for _ in iter(range(10)):
-                next(self._data_1)
-                next(self._data_2)
+        for _ in iter(range(10)):
+            next(self._data_1)
+            next(self._data_2)
 
     @route('/query')
     def handle_query(self, x):
@@ -276,12 +291,12 @@ class App(object):
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         except Exception as e:
-            print ("error getting stocks...reinitalizing app")
+            print("error getting stocks...re-initializing app")
             self.__init__()
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         t = t1 if t1 > t2 else t2
-        print ('Query received @ t%s' % t)
+        print('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -295,7 +310,7 @@ class App(object):
                 'size': asks1[0][1]
             }
         },
-        {
+            {
             'id': x and x.get('id', None),
             'stock': 'DEF',
             'timestamp': str(t),
@@ -313,8 +328,9 @@ class App(object):
 #
 # Main
 
+
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print ("No data found, generating...")
+        print("No data found, generating...")
         generate_csv()
     run(App())
-- 
2.37.0.windows.1

